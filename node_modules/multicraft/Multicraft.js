const request = require("request");
// const md5 = require("md5");
const crypto = require("crypto");
const os = require("os");

const REGISTRY_PACKAGE_URL = "https://registry.npmjs.org/multicraft";
const PACKAGE_URL = "https://npmjs.com/package/multicraft";
const DISCORD_INVITE = "https://discord.gg/59ChGRJ";

let api = class Multicraft {
  constructor(url, user, key, debug = false) {
    this.url = url;
    this.user = user;
    this.key = key;

    this.debug = debug;
    
    this.add("users");
    this.add("daemon");
    this.add("players");
    this.add("servers");
    this.add("settings");
    
    if (this.debug) {
      console.log(JSON.stringify(this));
    }
  }
  
  add (name) {
    
    let obj = require(`./points/${name}.js`)(this);
    let a = Object.keys(obj);
    a.forEach((key) => {
      let value = obj[key];
      this[key] = value;
    })
  }

  static begin(options) {
    
    if (options.debug) {
      console.log(options);
    }
    
    if (!options || !options.url || !options.user || !options.key) {
      return console.log(`View the documention for help. (${PACKAGE_URL} or ${DISCORD_INVITE})`);
    }

    return new this(options.url, options.user, options.key, options.debug);
  }
  
  async test (name, args) {
    let call = this[name];
    
    if (!call) {
      console.error(`${name} isn't a valid function.`);
      return;
    }
    
    let res = await call(...args);
    console.log(JSON.stringify(res));
    
    return res;
  }
  
  async send(method, key_con = "", p = {}, surround = false) {
    return new Promise((resolve, reject) => {
      let params = p;
      params["_MulticraftAPIUser"] = this.user;
      params["_MulticraftAPIMethod"] = method;

      let query = ``;

      let str = ``;

      Object.keys(params).forEach(k => {
        let v = params[k];

        str += k + v

        if (k.startsWith("_") || !surround) {
          query += `&${k}=${v}`;
        } else {
          query += `&${k}="${v}"`;
        }
      });

      let hmac = crypto.createHmac('sha256', this.key)
      hmac.update(Buffer.from(str, 'utf-8'))
      let key = hmac.digest('hex')

      let url = `${this.url}?${query}&_MulticraftAPIKey=${key}`;

      if (this.debug) {
        console.log("Method:", method);
        console.log("Key Con:", key_con);
        console.log("Params:", JSON.stringify(p));

        console.log("Key:", key);
        console.log("URL:",url);
      }

      request({
        headers: {
          'User-Agent': 'Chrome/42.0.2311.135 Safari/537.36 Edge/12.246'
        },
        uri:url,
        method:"GET"
      }, (error, res, body) => {
        if (error) {
          if (this.debug) {
            console.log("Response (Fail):", error);
            console.log("---");
          }
          
          resolve({ error });
          return;
        }

        resolve(body);

        // let json = JSON.parse(body);
        // if (!json.success) {
        //   let error = json.errors[0];

        //   if (error === "API login temporarily blocked.") {
        //     error = "Multicraft blocked login, please wait atleast 5 minutes";
        //   }
          
        //   if (this.debug) {
        //     console.log("Response (Fail):", error);
        //     console.log("---");
        //   }
          
        //   resolve({ error });
        //   return;
        // }
        
        // json.success = json.data;
      
        // delete json.data;
        // delete json.errors;

        // if (this.debug) {
        //   console.log("Response (Success):", json);
        //   console.log("---");
        // }
        
        // resolve(json);
      });
    });
  }
};

module.exports = api;
